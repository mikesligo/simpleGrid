package simpleGrid.diagram.edit.parts;

/**
 * @generated
 */
public class Transformer_configurationEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 2004;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public Transformer_configurationEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
				super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new simpleGrid.diagram.edit.policies.Transformer_configurationItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
			
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy() {
			
			protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new Transformer_configurationFigure();
	}

		/**
 * @generated
 */
	public Transformer_configurationFigure getPrimaryShape() {
		return (Transformer_configurationFigure) primaryShape;
	}
	

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

		

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnTarget() {
		java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(1);
				types.add(simpleGrid.diagram.providers.SimpleGridElementTypes.TransformerTransformer_configuration_4006);
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMATypesForSource(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
				if (relationshipType == simpleGrid.diagram.providers.SimpleGridElementTypes.TransformerTransformer_configuration_4006) {
						types.add(simpleGrid.diagram.providers.SimpleGridElementTypes.Transformer_2010);
					}
				return types;
	}


		
	
	
	
/**
 * @generated
 */
public class Transformer_configurationFigure extends org.eclipse.gmf.runtime.lite.svg.SVGFigure {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationNameFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationConnect_typeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationInstall_typeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationPower_ratingFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationImpedenceFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationImpedence1Figure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationImpedence2Figure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationShunt_impedenceFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationPrimary_voltageFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureTransformer_configurationSecondary_voltageFigure; 


	/**
	 * @generated
	 */
	public Transformer_configurationFigure() {
		
	org.eclipse.draw2d.FlowLayout layoutThis = new org.eclipse.draw2d.FlowLayout();
	layoutThis.setStretchMinorAxis(false);
	layoutThis.setMinorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);

	layoutThis.setMajorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);
	layoutThis.setMajorSpacing(5);
	layoutThis.setMinorSpacing(5);
	layoutThis.setHorizontal(true);

	this.setLayoutManager(layoutThis);

		this.setURI("file:///home/mike/src/simpleGrid/org.gmf.example.simpleGrid/images/config.svg");
		createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigureTransformer_configurationNameFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationNameFigure.setText("<...>");

this.add(fFigureTransformer_configurationNameFigure);



fFigureTransformer_configurationConnect_typeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationConnect_typeFigure.setText("<...>");

this.add(fFigureTransformer_configurationConnect_typeFigure);



fFigureTransformer_configurationInstall_typeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationInstall_typeFigure.setText("<...>");

this.add(fFigureTransformer_configurationInstall_typeFigure);



fFigureTransformer_configurationPower_ratingFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationPower_ratingFigure.setText("<...>");

this.add(fFigureTransformer_configurationPower_ratingFigure);



fFigureTransformer_configurationImpedenceFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationImpedenceFigure.setText("<...>");

this.add(fFigureTransformer_configurationImpedenceFigure);



fFigureTransformer_configurationImpedence1Figure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationImpedence1Figure.setText("<...>");

this.add(fFigureTransformer_configurationImpedence1Figure);



fFigureTransformer_configurationImpedence2Figure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationImpedence2Figure.setText("<...>");

this.add(fFigureTransformer_configurationImpedence2Figure);



fFigureTransformer_configurationShunt_impedenceFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationShunt_impedenceFigure.setText("<...>");

this.add(fFigureTransformer_configurationShunt_impedenceFigure);



fFigureTransformer_configurationPrimary_voltageFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationPrimary_voltageFigure.setText("<...>");

this.add(fFigureTransformer_configurationPrimary_voltageFigure);



fFigureTransformer_configurationSecondary_voltageFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureTransformer_configurationSecondary_voltageFigure.setText("<...>");

this.add(fFigureTransformer_configurationSecondary_voltageFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationNameFigure() {
		return fFigureTransformer_configurationNameFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationConnect_typeFigure() {
		return fFigureTransformer_configurationConnect_typeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationInstall_typeFigure() {
		return fFigureTransformer_configurationInstall_typeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationPower_ratingFigure() {
		return fFigureTransformer_configurationPower_ratingFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationImpedenceFigure() {
		return fFigureTransformer_configurationImpedenceFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationImpedence1Figure() {
		return fFigureTransformer_configurationImpedence1Figure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationImpedence2Figure() {
		return fFigureTransformer_configurationImpedence2Figure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationShunt_impedenceFigure() {
		return fFigureTransformer_configurationShunt_impedenceFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationPrimary_voltageFigure() {
		return fFigureTransformer_configurationPrimary_voltageFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureTransformer_configurationSecondary_voltageFigure() {
		return fFigureTransformer_configurationSecondary_voltageFigure;
	}


}


	
	}
